trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: resourceGroup
  value: 'BookStoreRG'
- name: location
  value: 'East US'
- name: aksClusterName
  value: 'bookstore-aks'
- name: aksNodeCount
  value: '2'
- name: aksNodeSize
  value: 'Standard_B2s'
- name: containerRegistryName
  value: 'bookstoreaure'
- name: serviceBusNamespace
  value: 'bookstore-servicebus'
- name: topicName
  value: 'product-events'
- name: subscriptionName
  value: 'inventory-subscription'
- name: apimServiceName
  value: 'bookstore-apim'
- name: functionAppName
  value: 'bookstore-proxy'
- name: storageAccountName
  value: 'bookstorestorageacct'
- name: appServicePlanName
  value: 'bookstore-plan'

stages:
- stage: Provision
  displayName: 'Provision Azure Resources'
  jobs:
  - job: CreateResources
    displayName: 'Create Resources'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Creating resource group..."
          az group create --name "$(resourceGroup)" --location "$(location)"

          echo "Registering Microsoft.ContainerService..."
          az provider register --namespace Microsoft.ContainerService

          echo "Waiting for Microsoft.ContainerService registration to complete..."
          for i in {1..10}; do
            state=$(az provider show --namespace Microsoft.ContainerService --query "registrationState" -o tsv)
            echo "State: $state"
            if [ "$state" == "Registered" ]; then break; fi
            sleep 10
          done

          echo "Creating AKS cluster if not exists..."
          az aks show --name "$(aksClusterName)" --resource-group "$(resourceGroup)" 2>/dev/null || \
          az aks create --name "$(aksClusterName)" \
                        --resource-group "$(resourceGroup)" \
                        --location "$(location)" \
                        --node-count "$(aksNodeCount)" \
                        --node-vm-size "$(aksNodeSize)" \
                        --generate-ssh-keys

          echo "Attaching ACR to AKS..."
          az aks update \
            --name "$(aksClusterName)" \
            --resource-group "$(resourceGroup)" \
            --attach-acr "$(containerRegistryName)"

          echo "Creating Service Bus namespace, topic, and subscription..."
          az servicebus namespace create --name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" --location "$(location)" || true
          az servicebus topic create --name "$(topicName)" --namespace-name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" || true
          az servicebus topic subscription create --name "$(subscriptionName)" --topic-name "$(topicName)" --namespace-name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" || true

          echo "Creating APIM instance..."
          az apim show --resource-group "$(resourceGroup)" --name "$(apimServiceName)" || \
          az apim create --name "$(apimServiceName)" \
                         --resource-group "$(resourceGroup)" \
                         --location "$(location)" \
                         --publisher-email "admin@bookstore.com" \
                         --publisher-name "BookStore Admin" \
                         --sku-name Developer

          echo "Creating Storage Account for Azure Function..."
          az storage account create \
            --name "$(storageAccountName)" \
            --location "$(location)" \
            --resource-group "$(resourceGroup)" \
            --sku Standard_LRS || true

          echo "Creating App Service Plan for Azure Function..."
          az functionapp plan create \
            --name "$(appServicePlanName)" \
            --resource-group "$(resourceGroup)" \
            --location "$(location)" \
            --number-of-workers 1 \
            --sku B1 \
            --is-linux true || true

          echo "Creating Azure Function App for Proxy..."
          az functionapp create \
            --name "$(functionAppName)" \
            --storage-account "$(storageAccountName)" \
            --resource-group "$(resourceGroup)" \
            --plan "$(appServicePlanName)" \
            --runtime dotnet \
            --functions-version 4 \
            --os-type Linux || true

          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group "$(resourceGroup)" --name "$(aksClusterName)" --overwrite-existing

          echo "Installing NGINX Ingress Controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml

          echo "Waiting for ingress-nginx-controller external IP..."
          for i in {1..20}; do
            IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Current IP: $IP"
            if [ -n "$IP" ]; then break; fi
            sleep 15
          done

          echo "Installing cert-manager..."
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml

          echo "Waiting for cert-manager pods to be ready..."
          kubectl rollout status deployment/cert-manager -n cert-manager --timeout=180s
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=180s
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=180s

          echo "Creating Let's Encrypt ClusterIssuer..."
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: admin@bookstore.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: nginx
          
