trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: aksClusterName
  value: 'bookstore-aks'
- name: aksResourceGroup
  value: 'BookStoreRG'
- name: namespace
  value: 'bookstore'
- name: imageRepository
  value: 'productservice'
- name: imageRepositoryInventory
  value: 'inventoryservice'
- name: containerRegistry
  value: 'bookstoreaure.azurecr.io'
- name: imageTag
  value: 139
- name: apimResourceGroup
  value: 'BookStoreRG'
- name: apimInstance
  value: 'bookstore-apim'
- name: productHost
  value: 'bookstoremicro.duckdns.org'
- name: inventoryHost
  value: 'bookstoremicro.duckdns.org'
- name: functionAppName
  value: 'bookstore-proxy'
- name: functionAppZipPath
  value: '$(Pipeline.Workspace)/functionproxyzip/azure-function-proxy.zip'

stages:
- stage: Deploy
  displayName: 'Deploy Services to AKS and Azure Function'
  jobs:
  - job: DeployToKubernetes
    displayName: 'Deploy ProductService and InventoryService'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Secrets, Deploy Services, Create Ingress, Patch Annotations'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          kubectl get namespace $(namespace) || kubectl create namespace $(namespace)

          echo "Creating productservice secrets..."
          kubectl create secret generic productservice-secrets \
            --from-literal=Jwt__Key="$(JwtKey)" \
            --from-literal=Kafka__BootstrapServers="$(KafkaBootstrapServers)" \
            --from-literal=Kafka__Username="$(KafkaUsername)" \
            --from-literal=Kafka__Password="$(KafkaPassword)" \
            --from-literal=Cosmos__Endpoint="$(CosmosEndpoint)" \
            --from-literal=Cosmos__Key="$(CosmosKey)" \
            --from-literal=ServiceBus__Connection="$(ServiceBusConnection)" \
            --namespace="$(namespace)" --dry-run=client -o yaml | kubectl apply -f -

          echo "Creating inventoryservice secrets..."
          kubectl create secret generic inventoryservice-secrets \
            --from-literal=Jwt__Key="$(JwtKey)" \
            --from-literal=Kafka__KafkaBootstrapServers="$(KafkaBootstrapServers)" \
            --from-literal=Kafka__KafkaUsername="$(KafkaUsername)" \
            --from-literal=Kafka__KafkaPassword="$(KafkaPassword)" \
            --from-literal=Cosmos__Endpoint="$(CosmosEndpoint)" \
            --from-literal=Cosmos__Key="$(CosmosKey)" \
            --from-literal=ServiceBus__Connection="$(ServiceBusConnection)" \
            --namespace="$(namespace)" --dry-run=client -o yaml | kubectl apply -f -

          echo "Deploying ProductService and InventoryService..."
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: productservice
            template:
              metadata:
                labels:
                  app: productservice
              spec:
                containers:
                - name: productservice
                  image: $(containerRegistry)/$(imageRepository):$(imageTag)
                  ports:
                  - containerPort: 80
                  env:
                  - name: ASPNETCORE_URLS
                    value: http://+:80
                  envFrom:
                  - secretRef:
                      name: productservice-secrets
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            selector:
              app: productservice
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: inventoryservice
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: inventoryservice
            template:
              metadata:
                labels:
                  app: inventoryservice
              spec:
                containers:
                - name: inventoryservice
                  image: $(containerRegistry)/$(imageRepositoryInventory):$(imageTag)
                  ports:
                  - containerPort: 80
                  env:
                  - name: ASPNETCORE_URLS
                    value: http://+:80
                  envFrom:
                  - secretRef:
                      name: inventoryservice-secrets
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: inventoryservice
            namespace: $(namespace)
          spec:
            selector:
              app: inventoryservice
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: ClusterIP
          EOF

          echo "Creating Ingress for productservice and inventoryservice..."
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: bookstore-ingress
            namespace: $(namespace)
            annotations:
              kubernetes.io/ingress.class: nginx
              cert-manager.io/cluster-issuer: letsencrypt-prod
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - $(productHost)
              secretName: bookstore-tls
            rules:
            - host: $(productHost)
              http:
                paths:
                - path: /product(/|$)(.*)
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: productservice
                      port:
                        number: 80
                - path: /inventory(/|$)(.*)
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: inventoryservice
                      port:
                        number: 80
          EOF

          echo "Patching ingress with rewrite annotations..."
          kubectl patch ingress bookstore-ingress -n $(namespace) --type='merge' -p '{
            "metadata": {
              "annotations": {
                "nginx.ingress.kubernetes.io/rewrite-target": "/$2",
                "nginx.ingress.kubernetes.io/use-regex": "true"
              }
            }
          }'

  - job: DeployFunctionApp
    displayName: 'Deploy Azure Function Proxy'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Function Proxy ZIP Artifact'
      inputs:
        source: 'specific'
        project: 'BookStore'
        pipeline: 'Bookstore.Kubernetes.Build'
        runVersion: 'latest'
        artifact: 'functionproxyzip'
        path: '$(Pipeline.Workspace)/functionproxyzip'

    - task: AzureCLI@2
      displayName: 'Retryable Azure Function Zip Deployment'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Warming up Kudu endpoint..."
          for i in {1..3}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$(functionAppName).scm.azurewebsites.net)
            echo "Attempt $i - Status: $STATUS"
            if [ "$STATUS" == "200" ] || [ "$STATUS" == "403" ]; then break; fi
            sleep 10
          done

          echo "Deploying Azure Function Zip with retry..."
          for i in {1..3}; do
            echo "Zip deploy attempt $i..."
            az functionapp deployment source config-zip \
              --resource-group $(apimResourceGroup) \
              --name $(functionAppName) \
              --src $(functionAppZipPath) && break || sleep 30
          done

- stage: ImportToAPIM
  displayName: 'Import APIs to APIM'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: ImportAPI
    displayName: 'Import Swagger to APIM and Set serviceUrl'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Import Product & Inventory APIs'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Importing ProductService API..."
          az apim api import \
            --resource-group $(apimResourceGroup) \
            --service-name $(apimInstance) \
            --api-id productservice-api \
            --path product \
            --display-name "ProductService API" \
            --specification-url "https://$(productHost)/product/swagger/v1/swagger.json" \
            --specification-format OpenApi

          az apim api update \
            --resource-group $(apimResourceGroup) \
            --service-name $(apimInstance) \
            --api-id productservice-api \
            --set serviceUrl=https://$(productHost)/product

          echo "Importing InventoryService API..."
          az apim api import \
            --resource-group $(apimResourceGroup) \
            --service-name $(apimInstance) \
            --api-id inventoryservice-api \
            --path inventory \
            --display-name "InventoryService API" \
            --specification-url "https://$(inventoryHost)/inventory/swagger/v1/swagger.json" \
            --specification-format OpenApi

          az apim api update \
            --resource-group $(apimResourceGroup) \
            --service-name $(apimInstance) \
            --api-id inventoryservice-api \
            --set serviceUrl=https://$(inventoryHost)/inventory
