trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: resourceGroup
  value: 'BookStoreRG'
- name: location
  value: 'East US'
- name: productServiceApp
  value: 'bookstore-product-service'
- name: inventoryServiceApp
  value: 'bookstore-inventory-service'
- name: productUiApp
  value: 'bookstore-product-ui'
- name: serviceBusNamespace
  value: 'bookstore-servicebus'
- name: topicName
  value: 'product-events'
- name: subscriptionName
  value: 'inventory-subscription'

stages:
- stage: Provision
  displayName: 'Provision Azure Resources'
  jobs:
  - job: CreateResources
    displayName: 'Create App Services and Service Bus'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Creating resource group if not exists..."
          az group create --name "$(resourceGroup)" --location "$(location)"

          echo "Creating App Service Plans and WebApps..."
          for app in "$(productServiceApp)" "$(inventoryServiceApp)" "$(productUiApp)"; do
            PLAN_NAME="${app}-plan"
            az appservice plan create --name "$PLAN_NAME" --resource-group "$(resourceGroup)" --sku B1 --is-linux --location "$(location)" || true
            az webapp create --name "$app" --resource-group "$(resourceGroup)" --plan "$PLAN_NAME" --runtime "DOTNETCORE|7.0" || true
          done

          echo "Creating Service Bus namespace, topic, and subscription..."
          az servicebus namespace create --name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" --location "$(location)" || true
          az servicebus topic create --name "$(topicName)" --namespace-name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" || true
          az servicebus topic subscription create --name "$(subscriptionName)" --topic-name "$(topicName)" --namespace-name "$(serviceBusNamespace)" --resource-group "$(resourceGroup)" || true

          echo "Fetching Service Bus primary connection string..."
          serviceBusConnectionString=$(az servicebus namespace authorization-rule keys list \
            --resource-group "$(resourceGroup)" \
            --namespace-name "$(serviceBusNamespace)" \
            --name RootManageSharedAccessKey \
            --query "primaryConnectionString" --output tsv)

          echo "Setting App Settings for Product Service App..."
          az webapp config appsettings set --name "$(productServiceApp)" --resource-group "$(resourceGroup)" --settings \
            "Jwt__Issuer=BookStore.Identity" \
            "Jwt__Audience=BookStore.Services" \
            "Jwt__Key=$JWT_KEY" \
            "ServiceBus__ConnectionString=$serviceBusConnectionString" \
            "Kafka__BootstrapServers=$KAFKA_BOOTSTRAP" \
            "Kafka__Username=$KAFKA_USER" \
            "Kafka__Password=$KAFKA_PASS" \
            "Messaging__Provider=Kafka" \
            "Database__Provider=InMemory" \
            "Database__Cosmos__AccountEndpoint=$COSMOS_ENDPOINT" \
            "Database__Cosmos__AccountKey=$COSMOS_KEY" \
            "Database__Cosmos__DatabaseName=BookStoreDB"
      env:
        JWT_KEY: $(JwtKey)
        KAFKA_BOOTSTRAP: $(KafkaBootstrapServers)
        KAFKA_USER: $(KafkaUsername)
        KAFKA_PASS: $(KafkaPassword)
        COSMOS_ENDPOINT: $(CosmosEndpoint)
        COSMOS_KEY: $(CosmosKey)

- stage: Build
  displayName: 'Build and Publish Artifacts'
  jobs:
  - job: BuildDotNet
    displayName: 'Build Product and Inventory Services'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore & Build ProductService'
      inputs:
        command: 'build'
        projects: 'BookStore.ProductSCA/BookStore.ProductService/src/BookStore.ProductService.API/BookStore.ProductService.API.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish ProductService'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'BookStore.ProductSCA/BookStore.ProductService/src/BookStore.ProductService.API/BookStore.ProductService.API.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/ProductService'

    - task: DotNetCoreCLI@2
      displayName: 'Restore & Build InventoryService'
      inputs:
        command: 'build'
        projects: 'BookStore.ProductSCA/BookStore.InventoryService/InventoryService.API/BookStore.InventoryService.API.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish InventoryService'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'BookStore.ProductSCA/BookStore.InventoryService/InventoryService.API/BookStore.InventoryService.API.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/InventoryService'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Backend Services Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'

  - job: BuildAngular
    displayName: 'Build Angular UI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd BookStore.ProductSCA/product-ui
        npm install
        npx ng build --configuration production
      displayName: 'Build Angular App'

    - task: CopyFiles@2
      displayName: 'Copy Angular UI to Artifact Staging'
      inputs:
        SourceFolder: 'BookStore.ProductSCA/product-ui/dist/product-ui'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ProductUI'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Angular UI Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'
