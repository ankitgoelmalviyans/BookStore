# Azure DevOps Release Pipeline YAML for Kubernetes Deployment with dynamic BuildId tag

trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: aksClusterName
  value: 'bookstore-aks'
- name: aksResourceGroup
  value: 'BookStoreRG'
- name: namespace
  value: 'bookstore'
- name: imageRepository
  value: 'productservice'
- name: containerRegistry
  value: 'bookstoreaure.azurecr.io'
- name: imageTag
  value: '$(Build.BuildId)'

stages:
- stage: Deploy
  displayName: 'Deploy to AKS'
  jobs:
  - job: DeployToKubernetes
    displayName: 'Create Kubernetes Secret & Deploy ProductService'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Secret & Apply Deployment'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

          echo "Creating namespace if not exists..."
          kubectl get namespace $(namespace) || kubectl create namespace $(namespace)

          echo "Creating Kubernetes Secret dynamically..."
          kubectl create secret generic productservice-secrets \
            --from-literal=JwtKey=$(JwtKey) \
            --from-literal=KafkaBootstrapServers=$(KafkaBootstrapServers) \
            --from-literal=KafkaUsername=$(KafkaUsername) \
            --from-literal=KafkaPassword=$(KafkaPassword) \
            --from-literal=CosmosEndpoint=$(CosmosEndpoint) \
            --from-literal=CosmosKey=$(CosmosKey) \
            --namespace=$(namespace) --dry-run=client -o yaml | kubectl apply -f -

          echo "Deploying ProductService with image tag $(imageTag)..."
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: productservice
            template:
              metadata:
                labels:
                  app: productservice
              spec:
                containers:
                - name: productservice
                  image: $(containerRegistry)/$(imageRepository):$(imageTag)
                  ports:
                  - containerPort: 80
                  envFrom:
                  - secretRef:
                      name: productservice-secrets
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            selector:
              app: productservice
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: LoadBalancer
          EOF
