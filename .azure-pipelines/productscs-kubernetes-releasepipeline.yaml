trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: aksClusterName
  value: 'bookstore-aks'
- name: aksResourceGroup
  value: 'BookStoreRG'
- name: namespace
  value: 'bookstore'

stages:
- stage: DeployToAKS
  displayName: 'Deploy ProductService to AKS'
  jobs:
  - job: Deploy
    displayName: 'Deploy to Kubernetes'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: AzureCLI@2
      displayName: 'Create Kubernetes Secret & Deploy'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --name $(aksClusterName) --resource-group $(aksResourceGroup) --overwrite-existing

          echo "Creating namespace if not exists..."
          kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -

          echo "Creating Kubernetes Secret..."
          kubectl delete secret productservice-secrets -n $(namespace) --ignore-not-found
          kubectl create secret generic productservice-secrets -n $(namespace) \
            --from-literal=JwtKey=$(JwtKey) \
            --from-literal=KafkaBootstrapServers=$(KafkaBootstrapServers) \
            --from-literal=KafkaUsername=$(KafkaUsername) \
            --from-literal=KafkaPassword=$(KafkaPassword) \
            --from-literal=CosmosEndpoint=$(CosmosEndpoint) \
            --from-literal=CosmosKey=$(CosmosKey) \
            --from-literal=ServiceBusConnection=$(ServiceBusConnection)

          echo "Deploying ProductService..."
          cat <<EOF | kubectl apply -n $(namespace) -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: productservice
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: productservice
            template:
              metadata:
                labels:
                  app: productservice
              spec:
                containers:
                - name: productservice
                  image: bookstoreaure.azurecr.io/productservice:$(Build.BuildId)
                  ports:
                  - containerPort: 80
                  env:
                  - name: JwtKey
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: JwtKey
                  - name: KafkaBootstrapServers
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: KafkaBootstrapServers
                  - name: KafkaUsername
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: KafkaUsername
                  - name: KafkaPassword
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: KafkaPassword
                  - name: CosmosEndpoint
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: CosmosEndpoint
                  - name: CosmosKey
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: CosmosKey
                  - name: ServiceBusConnection
                    valueFrom:
                      secretKeyRef:
                        name: productservice-secrets
                        key: ServiceBusConnection
EOF
