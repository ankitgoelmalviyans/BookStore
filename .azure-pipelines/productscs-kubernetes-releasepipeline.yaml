trigger: none

variables:
- group: BookStoreSecrets
- name: azureSubscription
  value: 'AzureServiceConnectionName'
- name: aksClusterName
  value: 'bookstore-aks'
- name: aksResourceGroup
  value: 'BookStoreRG'
- name: namespace
  value: 'bookstore'
- name: imageRepository
  value: 'productservice'
- name: containerRegistry
  value: 'bookstoreaure.azurecr.io'
- name: imageTag
  value: 84
- name: apimResourceGroup
  value: 'BookStoreRG'  # Replace if different
- name: apimInstance
  value: 'bookstore-apim-new-1'  # Your APIM instance name

stages:
# -----------------------------
# Stage 1: Deploy to AKS
# -----------------------------
- stage: Deploy
  displayName: 'Deploy ProductService to AKS'
  jobs:
  - job: DeployToKubernetes
    displayName: 'Deploy ProductService to Kubernetes'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Create Secret & Apply Deployment'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

          echo "Creating namespace if not exists..."
          kubectl get namespace $(namespace) || kubectl create namespace $(namespace)

          echo "Creating Kubernetes Secret dynamically..."
          kubectl create secret generic productservice-secrets \
            --from-literal=Jwt__Key=$(JwtKey) \
            --from-literal=Kafka__BootstrapServers=$(KafkaBootstrapServers) \
            --from-literal=Kafka__Username=$(KafkaUsername) \
            --from-literal=Kafka__Password=$(KafkaPassword) \
            --from-literal=Cosmos__Endpoint=$(CosmosEndpoint) \
            --from-literal=Cosmos__Key=$(CosmosKey) \
            --from-literal=ServiceBus__Connection=$(ServiceBusConnection) \
            --namespace=$(namespace) --dry-run=client -o yaml | kubectl apply -f -

          echo "Deploying ProductService with image tag $(imageTag)..."
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: productservice
            template:
              metadata:
                labels:
                  app: productservice
              spec:
                containers:
                - name: productservice
                  image: $(containerRegistry)/$(imageRepository):$(imageTag)
                  ports:
                  - containerPort: 80
                  env:
                  - name: ASPNETCORE_URLS
                    value: http://+:80
                  envFrom:
                  - secretRef:
                      name: productservice-secrets
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: productservice
            namespace: $(namespace)
          spec:
            selector:
              app: productservice
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: LoadBalancer
          EOF

# -----------------------------
# Stage 2: Import to APIM
# -----------------------------
- stage: ImportToAPIM
  displayName: 'Import ProductService API to APIM'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: ImportAPI
    displayName: 'Import Swagger to APIM'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Import API into APIM with retries'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

          echo "Trying to retrieve External IP for ProductService..."
          EXTERNAL_IP=""
          RETRIES=10

          while [ -z "$EXTERNAL_IP" ] && [ $RETRIES -gt 0 ]; do
            echo "Waiting for External IP... ($RETRIES attempts left)"
            EXTERNAL_IP=$(kubectl get svc productservice -n $(namespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -z "$EXTERNAL_IP" ]; then
              sleep 15
              RETRIES=$((RETRIES - 1))
            fi
          done

          if [ -z "$EXTERNAL_IP" ]; then
            echo "Failed to get External IP after multiple retries."
            exit 1
          fi

          echo "External IP obtained: $EXTERNAL_IP"
          echo "Swagger URL: http://$EXTERNAL_IP/swagger/v1/swagger.json"

          echo "Importing ProductService API into APIM..."
          az apim api import \
            --resource-group $(apimResourceGroup) \
            --service-name $(apimInstance) \
            --api-id productservice-api \
            --path product \
            --display-name "ProductService API" \
            --specification-url "http://$EXTERNAL_IP/swagger/v1/swagger.json" \
            --specification-format OpenApi

          echo "API imported successfully to APIM!"
